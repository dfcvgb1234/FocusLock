<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        f+fz///P+P//H/x//j/+H/h//4AB///gB/8=
</value>
  </data>
</root>